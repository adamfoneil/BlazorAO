@page "/Grid/BareMinimum"
@inject DapperCX<int, UserProfile> Data
@attribute [Authorize]

<h3>Bare Minimum</h3>
<p>This page demonstrates a bare-minimum grid that you can insert, update, and delete rows from.</p>
<p>Also shows timestamp columns. You might not show these in a real app, but this is showing how timestamps are tracked by 
    <a href="https://github.com/adamfoneil/BlazorAO/blob/master/BlazorAO.Models/Conventions/BaseTable.cs#L23">implementing <code>IAudit</code></a> on the <code>BaseTable</code></p>

<ErrorMessage @ref="error"/>

<div class="mb-2">
    <RadzenButton Icon="add_circle_outline" Text="Add" Click="InsertRow" />
</div>

<RadzenGrid TItem="ItemType" Data="data" RowCreate="SaveRow" RowUpdate="SaveRow" @ref="grid">
    <Columns>
        <RadzenGridColumn TItem="ItemType" Title="Item Type Name" Property="Name">
            <EditTemplate Context="i">
                <RadzenTextBox @bind-Value="i.Name" MaxLength="50"/>
            </EditTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="ItemType" Title="Active" Width="100px">
            <Template Context="it">
                <RadzenSwitch @bind-Value="it.IsActive" Disabled="true"/>
            </Template>
            <EditTemplate Context="it">
                <RadzenSwitch @bind-Value="it.IsActive"/>
            </EditTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="ItemType" Title="Created">
            <Template Context="it">
                <span>@it.CreatedBy on @it.DateCreated</span>
            </Template>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="ItemType" Title="Modified">
            <Template Context="it">
                <span>@it.ModifiedBy on @it.DateModified</span>
            </Template>
        </RadzenGridColumn>

        <GridControls TItem="ItemType" Grid="grid" DeleteRow="DeleteRow" Width="110px"/>
    </Columns>
</RadzenGrid>

<GitHubLink/>

@code {
    IEnumerable<ItemType> data;
    RadzenGrid<ItemType> grid;
    ErrorMessage error;

    protected override async Task OnInitializedAsync()
    {
        await Data.InitDefaultTenantAsync();
        await RefreshList();
    }

    async Task RefreshList()
    {
        data = await Data.QueryAsync<ItemType>(new { workspaceId = Data.User?.WorkspaceId ?? 0 });
    }

    async Task SaveRow(ItemType itemType) =>
        await Data.TrySaveAsync(itemType,
            onSuccess: async (id) => await RefreshList(),
            onException: (exc) => error.Message = exc.Message);        

    async Task DeleteRow(ItemType itemType) =>
        await Data.TryDeleteAsync<ItemType>(itemType.Id,
            onSuccess: async() => await RefreshList(),
            onException: (exc) => error.Message = exc.Message);

    void InsertRow()
    {
        grid.InsertRow(new ItemType()
        {
            IsActive = true,
            WorkspaceId = Data.User?.WorkspaceId ?? 0
        });
    }
}
