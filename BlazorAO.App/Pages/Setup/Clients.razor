@page "/Setup/Clients"
@inject DapperCX<int, UserProfile> Data
@attribute [Authorize]

<h3>Clients</h3>

<ErrorMessage @ref="error"/>

<div class="d-flex justify-content-between align-items-center mb-2">
    <div>
        <RadzenButton Icon="add_circle_outline" Text="Add" Click="InsertRow" />
    </div>

    <div class="d-flex align-items-center">
        <ActiveFilter @bind-Value="query.IsActive"/>
        <RadzenButton Text="Refresh" Click="RefreshList" Icon="refresh" Class="ml-2"/>
    </div>
</div>

<RadzenGrid TItem="Client" Data="data" RowCreate="SaveRow" RowUpdate="SaveRow" @ref="grid">
	<Columns>
		<RadzenGridColumn TItem="Client" Title="ClientName" Property="Name">
			<EditTemplate Context="c">
				<RadzenTextBox @bind-Value="c.Name"/>
			</EditTemplate>
		</RadzenGridColumn>

		<RadzenGridColumn TItem="Client" Title="Allow Invoicing" Property="IsInvoiceable">
            <Template Context="c">
                <span>@c.AllowInvoicing</span>
            </Template>
			<EditTemplate Context="c">
				<RadzenSwitch @bind-Value="c.AllowInvoicing"/>
			</EditTemplate>
		</RadzenGridColumn>

        <RadzenGridColumn TItem="Client" Title="Invoice Email" Property="InvoiceEmail">
            <EditTemplate Context="c">
                <RadzenTextBox @bind-Value="c.InvoiceEmail"/>
            </EditTemplate>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="Client" Title="Active" Property="IsActive">
            <Template Context="c">
                <span>@c.IsActive</span>
            </Template>
            <EditTemplate Context="c">
                <RadzenSwitch @bind-Value="c.IsActive"/>
            </EditTemplate>
        </RadzenGridColumn>

        <GridControls Grid="grid" DeleteRow="DeleteRow" TItem="Client"/>
	</Columns>
</RadzenGrid>

<GitHubLink/>

@code {
    IEnumerable<Client> data;
    RadzenGrid<Client> grid;
    ErrorMessage error;
    MyClients query = new MyClients();

    protected override async Task OnInitializedAsync()
    {
        await RefreshList();
    }

    async Task RefreshList()
    {
        query.WorkspaceId = Data.User?.WorkspaceId ?? 0;
        data = await Data.QueryAsync(query);
    }

    async Task SaveRow(Client client) =>
        await Data.TrySaveAsync(client,
            onSuccess: async (id) => await RefreshList(),
            onException: (exc) => error.Message = exc.Message);

    async Task DeleteRow(Client client) =>
        await Data.TryDeleteAsync<Client>(client.Id,
            onSuccess: async() => await RefreshList(),
            onException: (exc) => error.Message = exc.Message);

    void InsertRow()
    {
        grid.InsertRow(new Client()
        {
            WorkspaceId = Data.User?.WorkspaceId ?? 0,
            IsActive = true
        });
    }
}
