@page "/Setup/Jobs"
@inject DapperCX<int, UserProfile> Data
@attribute [Authorize]

<h3>Jobs</h3>

<ErrorMessage @ref="error" />

<div id="grid">
    <div class="pr-2">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div>
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="InsertRow" />
            </div>
            <div class="d-flex align-items-center">
                <ActiveFilter @bind-Value="query.IsActive" />
                <RadzenButton Text="Refresh" Click="RefreshList" Icon="refresh" Class="ml-2" />
            </div>
        </div>

        <RadzenGrid TItem="Job" @ref="grid" Data="data" RowCreate="SaveRow" RowUpdate="SaveRow" SelectionMode="DataGridSelectionMode.Single" RowSelect="RowSelect">
            <Columns>
                <RadzenGridColumn TItem="Job" Title="Client" Property="ClientId">
                    <Template Context="j">
                        <span>@j.ClientName</span>
                    </Template>
                    <EditTemplate Context="j">
                        <RadzenDropDown @bind-Value="j.ClientId" Data="clients" ValueProperty="Id" TextProperty="Name" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="Job" Title="Job Name/Number" Property="Name">
                    <EditTemplate Context="j">
                        <RadzenTextBox @bind-Value="j.Name" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="Job" Title="Active" Property="IsActive">
                    <EditTemplate Context="j">
                        <RadzenSwitch @bind-Value="j.IsActive" />
                    </EditTemplate>
                </RadzenGridColumn>

                <GridControls Grid="grid" TItem="Job" DeleteRow="DeleteRow" />
            </Columns>
        </RadzenGrid>
    </div>

    <div class="pl-2">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div>
                <strong>Budgets:</strong>
                <span>@selectedJob?.JobDisplayName</span>
            </div>
            <div>
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="InsertBudget" />
            </div>
        </div>

        <RadzenGrid TItem="Budget" @ref="budgetGrid" Data="budgets" RowUpdate="SaveBudget" RowCreate="SaveBudget">
            <Columns>

                <RadzenGridColumn TItem="Budget" Title="Year" Property="Year">
                    <Template Context="b">
                        <span>@b.Year</span>
                    </Template>
                    <EditTemplate Context="b">
                        <RadzenDropDown @bind-Value="b.Year" Data="years" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="Budget" Title="Month" Property="Month">
                    <Template Context="b">
                        <span>@DateHelper.MonthName(b.Month, true)</span>
                    </Template>
                    <EditTemplate Context="b">
                        <RadzenDropDown @bind-Value="b.Month" Data="months" ValueProperty="Key" TextProperty="Value" />
                    </EditTemplate>
                </RadzenGridColumn>

                <RadzenGridColumn TItem="Budget" Title="Amount" Property="Amount">
                    <Template Context="b">
                        <span>@b.Amount.ToString("c0")</span>
                    </Template>
                    <EditTemplate Context="b">
                        <RadzenNumeric @bind-Value="b.Amount" />
                    </EditTemplate>
                </RadzenGridColumn>

                <GridControls Grid="budgetGrid" DeleteRow="DeleteBudget" TItem="Budget" />
            </Columns>
        </RadzenGrid>

    </div>
</div>

<GitHubLink />

@code {
    // jobs
    ErrorMessage error;
    RadzenGrid<Job> grid;
    IEnumerable<Job> data;
    MyJobs query = new MyJobs();
    IEnumerable<Client> clients;

    // budgets
    Job selectedJob;
    RadzenGrid<Budget> budgetGrid;
    IEnumerable<Budget> budgets;
    IEnumerable<int> years;
    Dictionary<int, string> months;

    protected override async Task OnInitializedAsync()
    {
        years = Enumerable.Range(DateTime.Today.Year - 1, 5);
        months = Enumerable.Range(1, 12).ToDictionary(i => i, i => DateHelper.MonthName(i, true));

        await base.OnInitializedAsync();
        query.WorkspaceId = Data.User?.WorkspaceId ?? 0;
        clients = await Data.QueryAsync<Client>(new { workspaceId = Data.User?.WorkspaceId ?? 0 });
        await RefreshList();
    }

    async Task RefreshList()
    {
        data = await Data.QueryAsync(query);
    }

    async Task SaveRow(Job row) =>
        await Data.TrySaveAsync(row,
            onSuccess: async (id) => await RefreshList(),
            onException: (exc) => error.Message = exc.Message);

    async Task DeleteRow(Job row) =>
        await Data.TryDeleteAsync<Job>(row.Id,
            onSuccess: async () => await RefreshList(),
            onException: (exc) => error.Message = exc.Message);

    void InsertRow() => grid.InsertRow(new Job());

    async Task RowSelect(Job row)
    {
        selectedJob = row;
        await RefreshBudgets();
    }

    async Task RefreshBudgets()
    {
        budgets = await Data.QueryAsync<Budget>(new { jobId = selectedJob.Id });
    }

    void InsertBudget() => budgetGrid.InsertRow(new Budget() { JobId = selectedJob.Id });

    async Task SaveBudget(Budget row) =>
        await Data.TrySaveAsync<Budget>(row,
            onSuccess: async (id) => await RefreshBudgets(),
            onException: (exc) => error.Message = exc.Message);

    async Task DeleteBudget(Budget row) =>
        await Data.TryDeleteAsync<Budget>(row.Id,
            onSuccess: async () => await RefreshBudgets(),
            onException: (exc) => error.Message = exc.Message);
}
