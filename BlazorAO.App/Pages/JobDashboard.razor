@page "/JobDashboard" 
@inject DapperCX<int, UserProfile> Data
@attribute [Authorize]

<h3>Job Dashboard</h3>

<RadzenGrid TItem="JobDashboardResult" AllowSorting="true" Data="data">
	<Columns>
		<RadzenGridColumn TItem="JobDashboardResult" Title="Client Name" Property="ClientName">
			<Template Context="j">
				<span>@j.ClientName</span>
			</Template>
		</RadzenGridColumn>

		<RadzenGridColumn TItem="JobDashboardResult" Title="JobName" Property="JobName">
			<Template Context="j">
				<span>@j.JobName</span>
			</Template>
		</RadzenGridColumn>

		<RadzenGridColumn TItem="JobDashboardResult" Title="Manager Name" Property="ManagerName">
			<Template Context="j">
				<span>@j.ManagerName</span>
			</Template>
		</RadzenGridColumn>
	
		<RadzenGridColumn TItem="JobDashboardResult" Title="Balance $" Property="BalanceDollars">
			<Template Context="j">
				<span>@string.Format("{0:c0}", j.BalanceDollars)</span>
			</Template>
			<FooterTemplate>
				<span>@string.Format("{0:c0}", data?.Sum(row => row.BalanceDollars))</span>
			</FooterTemplate>
		</RadzenGridColumn>

		<RadzenGridColumn TItem="JobDashboardResult" Title="Balance %" Property="BalancePercent">
			<Template Context="j">
				<div class="d-flex align-items-center">
					<span>@string.Format("{0:p1}", j.BalancePercent)</span>
					<progress value="@j.BalancePercentValue" max="100" class="ml-2 flex-grow-1"/>
				</div>				
			</Template>
		</RadzenGridColumn>
	</Columns>
</RadzenGrid>

<GitHubLink/>

@code { 
    // filter dropdowns
    IEnumerable<Client> clients;
    IEnumerable<UserProfile> managers;

    // grid data
    Queries.JobDashboard query = new Queries.JobDashboard();
    IEnumerable<JobDashboardResult> data;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        query.WorkspaceId = Data.User?.WorkspaceId ?? 0;
        await RefreshList();
    }

    async Task RefreshList()
    {
        data = await Data.QueryAsync(query);
    }
}
